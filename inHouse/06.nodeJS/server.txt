1. server
    - 쉽게 말해 요리를 서빙(serving)해주는 사람이 server라고 생각하면 된다.
    - 요청을 받으면 요청한 내용을 보내주는 프로그램
    - 요청은 4가지가 있다. --> 읽기(GET요청), 쓰기(POST요청), 수정(PUT요청), 삭제(DELETE요청)

2. Node.js
    - JS --> HTML조작을 위해서 만들어진 언어이다.(interaction) --> 웹페이지를 다이나믹하게 바꿔줌.
    - JS의 해석은 웹브라우저의 엔진에서 한다.(chrome, safari등 ···)
    - 여기서 chrome의 JS해석엔진인 V8을 따로 출시한게 Node.JS이다.
    - 브라우저 내에서 말고도 다른환경에서도 JS를 실행할수 있게 도와주는게 Node.js이다.
    - Node.js로는 server도 만들수 있고 또 많이 만들고 있다. --> non-blocking I/O라는 장점이 있기 때문(채팅, SNS에 자주사용)
        - 요청이 많거나 오래걸리는 요청이 이썽도 멈추거나 요청 대기시간이 없고, 우선적으로 되는 요청부터 바로바로 보내준다. --> non-blocking I/O
    - 코드가 매우 짧고 쉬워서 빠른 개발이 가능하다.
    - 대부분 웹서비스 생성시에 많이 사용한다.(이미지처리나, 통계, 수학계산 등은 python이나 C계열이 더 빠르다.)

3. npm 
    - npm --> 라이브러리 설치를 도와주는 도구이다.
    - package.json --> npm으로 설치한 라이브러리가 어떤건지 기록하는 곳(npm init으로 설치함)

4. API && REST-API
    - Application Programming Interface
    - 웹개발환경에서의 API? ==> 웹서버와 고객간의 소통방법(어떻게 해야 server랑 통신을 할 수 있을까?)
        └-> GET, POST요청들이 모두 API들이다.
    - REST(REpresentational State Transfer)
        - HTTP요청시스템(GET, POST, PUT, DELETE)을 너무 막쓰고 있는 우려가 많았었음.
        - 그래서 규칙적으로 요청하자는 법칙을 만들었는데 그게 REST-API이다.

            1. Uniform interface(얘가 제일 중요하다!)
                - 하나의 자료는 하나의 URL로
                - URL 하나를 알면 둘을 알 수 있어야한다.
                - 요청과 응답은 정보가 충분히 들어있어야 한다.
            2. Client-Server 역할구분
                - 브라우저는 요청만 할 뿐
                - server는 응답만 할 뿐
            3. Stateless
                - 각각의 요청들은 독립적인 존재로, 의존성이 없어야한다.
            4. Cacheable
                - 이건 브라우저가 알아서 해줌

        - 좋은 REST-API
            - 이름짓기 원칙
                1. URL울 명사로 작성하는것을 추천
                2. 하위문서를 나타낼 땐 '/'을 사용
                3. 파일확장자(.html등)은 쓰지말것
                4. 띄어쓰기는 대시(-) 사용
                5. 자료 하나당 하나의 URL로!(Unifrom interface)

5. DB(DataBase)
    - DB의종류

        1. 관계형
            - excel처럼 가로X세로로 데이터를 저장시킴(행과 열로 데이터를 저장한다.)
            - 거의 모든 곳에 사용할 수 있어서 범용적이다.
            - 구조화된 데이터 덕분에 원하는 데이터를 뽑기도 쉽다.
            - transaction roll-back 기능을 이요해 데이터의 무결성을 보존하기 쉽기 때문에 금융, 거래 서비스에 필수이다.
            - MySQL, Oracle···등이 대표적이다.
            - 관계형은 대부분 SQL이라는 언어를 사용한다. 

        2. NoSQL
            - Object 자료형으로 입출력이 가능하다.
            - 테이블(표)에 국한되지 않고 자유로운 형식으로 데이터를 쉽게 분산저장할 수 있다.
            - 대부분 다루기가 쉽다. --> 따로 SQL언어를 배울필요없이 JS만으로도 가능하다.
            - Dynamo, MongoDB···등이 대표적이다.

