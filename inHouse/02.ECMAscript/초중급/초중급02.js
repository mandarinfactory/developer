// 4. template literals && tagged literals(tagged는 자주 쓰이는 편은 아니다.)

var 문자 = `문자`; // ES6이후 부터 ``(backtick, backquote)을 이용해서 문자열을 나타낼수 있다.
// ``의 장점 : 엔터키 가능, 중간중간 변수넣기가 쉬움(""여기에 넣으려면 +""등 따로 떠 써야해서 불편했음.)
var 변수 = "변수";
var 두개더하기 = "두개" + 문자 + 변수 + "더하기";

var 지역 = `서울 ${문자} ${변수}`; // ${}를 통해 쉽게 변수를 넣을수 있다.

function 함수01() {
  return 10;
}
함수01`어서오시오`; // 함수뒤에 ``을 추가해 문자열을 추가할수 있다. --> tagged literal, 그냥 함수가 실행만 된다.
// 그럼 왜 ()만 하면 되지 굳이 `문자열`을 추가하나?
function 해체분석기(문자들, 변수들01, 변수들02) {
  console.log(문자들); // ['서울 ', ' ', '', raw: Array(3)]
  console.log(변수들01); // 문자
  console.log(변수들02); // 변수
  console.log(변수들02 + 문자들[0] + 변수들01); // 변수서울 문자 --> 이렇게 해체/분석이 가능하다.
}
해체분석기`서울 ${문자} ${변수}`; // --> 이를 통해 단어순서변경, 단어제어, ${변수}위치 옮기기등을 할 수 있다.(`문자`해체/분석이 가능하다.)
// 함수에서 parameter(01)은 문자들을 array화 해준다.
// parameter(02)는 ${변수}를 뜻한다.
// parameter(03)은 두번째 ${변수}를 뜻한다.

var pants = 20;
var socks = 100;
`바지${pants} 양말${socks}`;
function 해체분석기02(a, b, c) {
  console.log(a[1] + b + a[0] + c); // 양말20바지100
}
해체분석기02`바지${pants} 양말${socks}`;

function 해체분석기03(a, b, c) {
    if (b === 0) {
        b = "가 다 팔렸습니다."
        console.log(a[0] + b + a[1] + c); // 바지가 다 팔렸습니다. 양말100
    };
};
pants = 0;
해체분석기03`바지${pants} 양말${socks}`;